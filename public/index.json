
[{"content":"BSc in Computer Security and MSc in Data-Intensive Physics, specializing in Machine Learning/AI, Gravitational Wave Analysis, and Cryptography. Former GB athlete, I focused on time management and incremental goals to excel in sports. Transitioned to coaching to mentor athletes and foster their growth. Mental health advocate for athletes, founding a movement to promote enjoyment and recognize their value beyond sport. Pursuing a PhD in gravitational wave science or AI ethics\n","date":"7 October 2025","externalUrl":null,"permalink":"/about/","section":"My Portfolio","summary":"\u003cp\u003eBSc in Computer Security and MSc in Data-Intensive Physics, specializing in Machine Learning/AI, Gravitational Wave Analysis, and Cryptography. Former GB athlete, I focused on time management and incremental goals to excel in sports. Transitioned to coaching to mentor athletes and foster their growth. Mental health advocate for athletes, founding a movement to promote enjoyment and recognize their value beyond sport. Pursuing a PhD in gravitational wave science or AI ethics\u003c/p\u003e","title":"About","type":"page"},{"content":"","date":"7 October 2025","externalUrl":null,"permalink":"/","section":"My Portfolio","summary":"","title":"My Portfolio","type":"page"},{"content":" Experience Link Role Dates Location Tribela Head of Engineering 2025 - Present Hybrid - Oxford, UK Zeos Systems Founder 2024 - 2025 Remote Abingdon Vale Swimming Club Level 1 Swimming Coach 2022 - Present Remote Darren Bryan Security Services Access Control Engineer 2018 - Present Oxford, UK Education Link Degree Date Cardiff University MSc Data Intensive Physics Sept. 2024 - Sept. 2025 (expected) Cardiff Metropolitan BSc Cyber Security (1st Class Hons) Sept. 2021 - Jun. 2024 Oxford City College Extended Diploma in Engineering (MMM) Sep. 2018 - Jun. 2020 ","date":"7 October 2025","externalUrl":null,"permalink":"/resume/","section":"My Portfolio","summary":"\u003ch2 class=\"relative group\"\u003eExperience \n    \u003cdiv id=\"experience\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eLink\u003c/th\u003e\n      \u003cth\u003eRole\u003c/th\u003e\n      \u003cth\u003eDates\u003c/th\u003e\n      \u003cth\u003eLocation\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ca href=\"https://tribela.com\" target=\"_blank\"\u003eTribela\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eHead of Engineering\u003c/td\u003e\n      \u003ctd\u003e2025 - Present\u003c/td\u003e\n      \u003ctd\u003eHybrid - Oxford, UK\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ca href=\"http://www.zeos.systems\" target=\"_blank\"\u003eZeos Systems\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eFounder\u003c/td\u003e\n      \u003ctd\u003e2024 - 2025\u003c/td\u003e\n      \u003ctd\u003eRemote\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ca href=\"#\" target=\"_blank\"\u003eAbingdon Vale Swimming Club\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eLevel 1 Swimming Coach\u003c/td\u003e\n      \u003ctd\u003e2022 - Present\u003c/td\u003e\n      \u003ctd\u003eRemote\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ca href=\"https://darrenbryansecurityservices.co.uk\" target=\"_blank\"\u003eDarren Bryan Security Services\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eAccess Control Engineer\u003c/td\u003e\n      \u003ctd\u003e2018 - Present\u003c/td\u003e\n      \u003ctd\u003eOxford, UK\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2 class=\"relative group\"\u003eEducation \n    \u003cdiv id=\"education\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eLink\u003c/th\u003e\n      \u003cth\u003eDegree\u003c/th\u003e\n      \u003cth\u003eDate\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ca href=\"https://www.cardiff.ac.uk\" target=\"_blank\"\u003eCardiff University\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eMSc Data Intensive Physics\u003c/td\u003e\n      \u003ctd\u003eSept. 2024 - Sept. 2025 (expected)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ca href=\"https://www.cardiffmet.ac.uk\" target=\"_blank\"\u003eCardiff Metropolitan\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eBSc Cyber Security (1st Class Hons)\u003c/td\u003e\n      \u003ctd\u003eSept. 2021 - Jun. 2024\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ca href=\"#\" target=\"_blank\"\u003eOxford City College\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eExtended Diploma in Engineering (MMM)\u003c/td\u003e\n      \u003ctd\u003eSep. 2018 - Jun. 2020\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"Resume","type":"page"},{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"Github","type":"tags"},{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"For a while, I\u0026rsquo;ve wanted to start a blog to share my ideas and try to articulate what I\u0026rsquo;ve learned. Before this iteration of the blog, I tried using a template YAML file within JavaScript to create blog posts. This approach was terrible; it was hard to see any syntax or even format it properly afterward. Sometimes, it\u0026rsquo;s better to use already developed tools and techniques. That\u0026rsquo;s where I found an amazing video by NetworkChuck about setting up a content pipeline using Obsidian to create the Markdown files for a blog, and using a templater such as Hugo to turn them into pretty webpages like the one you are reading now. In this post, I will go over the steps I took to create this blog, and hopefully inspire you to create one as it\u0026rsquo;s so easy to achieve.\nSetting up Obsidian # The first thing we will do is install Obsidian and set up our blog posts directory. Obsidian is a note-taking and organisation tool that I\u0026rsquo;ve started to love using. You can organise markdown notes and content in folders to create a \u0026ldquo;second brain.\u0026rdquo; There are tools to set up personalised daily notes so you can track habits and create diaries. This content is synced between devices on your account as well. Download the app from https://obsidian.md/ and go through the setup.\nAfter you have setup Obsidian:\nCreate a new folder where you will put all you blog posts, I labelled mine \u0026ldquo;posts\u0026rdquo;. You can start to write your posts in this directory, all you need now is the path to the directory. Right click the folder and select \u0026ldquo;reveal in explorer\u0026rdquo;. Keep a note of this path as we will need it later. In order for the blog to have a title and tags we need to set some properties, all you need to add to the top of your document is.\n--- title: Making a Tech Blog using Hugo and Obsidian date: 2025-10-06 draft: false tags: - tag1 - tag2 --- Setting up Hugo # Firstly, install Git (https://github.com/git-guides/install-git) and Go (https://go.dev/dl/) and follow the steps to install for your system at https://gohugo.io/installation/. The installation is simple for Linux, as you can install it with your package manager. After everything is installed, you can start creating your website.\n## Verify Hugo works hugo version ## Create a new site hugo new site sitename cd sitename Update \u0026ldquo;sitename\u0026rdquo; with the project name. Next, you need to theme your site. My site uses Blowfish as a theme (https://blowfish.page/); however, an entire list of themes can be found here: https://themes.gohugo.io/. Follow the instructions to install the theme in your Hugo site. The easiest way is to use a Git submodule, however. WARNING: These commands will differ depending on the theme; follow the instructions on the theme page.\n## Initialize a git repository (Make sure you are in your Hugo website directory) git init ## Set global username and email parameters for git git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; ## Install a theme (we are installing the Blowfish theme here) ## Find a theme ---\u0026gt; https://themes.gohugo.io/ git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish ## Delete the hugo generated config and copy the blowfish configs into config/_default mkdir config/_default cp themes/blowfish/config/_default/* config/_default/ rm hugo.toml You can go through and update the config so you site looks how you want it to. After you\u0026rsquo;ve configured your site you can now test it with:\n## Verify Hugo works with your theme by running this command hugo server -t themename Getting content on your site # All your content for the website lives in the \u0026ldquo;content\u0026rdquo; folder. If you have different pages, you need a corresponding folder within the content directory. For our blog posts, we will create a directory called \u0026ldquo;posts\u0026rdquo; in the content folder and copy our content from Obsidian into this folder.\nFor Windows use:\nrobocopy sourcepath destination path /mir For Mac/Linux use:\nrsync -av --delete \u0026#34;sourcepath\u0026#34; \u0026#34;destinationpath\u0026#34; Finally, to add images to these posts, we will use a script made by NetworkCheck. He explains it in his video, which I highly recommend watching as a follow-along. Make sure you have the correct paths to your own Obsidian Vault and Hugo site. These are Python scripts, so make sure you have Python installed to run them.\nFor Windows:\nimport os import re import shutil # Paths (using raw strings to handle Windows backslashes correctly) posts_dir = r\u0026#34;C:\\Users\\chuck\\Documents\\chuckblog\\content\\posts\u0026#34; attachments_dir = r\u0026#34;C:\\Users\\chuck\\Documents\\my_second_brain\\neotokos\\Attachments\u0026#34; static_images_dir = r\u0026#34;C:\\Users\\chuck\\Documents\\chuckblog\\static\\images\u0026#34; # Step 1: Process each markdown file in the posts directory for filename in os.listdir(posts_dir): if filename.endswith(\u0026#34;.md\u0026#34;): filepath = os.path.join(posts_dir, filename) with open(filepath, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: content = file.read() # Step 2: Find all image links in the format ![Image Description](/images/Pasted%20image%20...%20.png) images = re.findall(r\u0026#39;\\[\\[([^]]*\\.png)\\]\\]\u0026#39;, content) # Step 3: Replace image links and ensure URLs are correctly formatted for image in images: # Prepare the Markdown-compatible link with %20 replacing spaces markdown_image = f\u0026#34;![Image Description](/images/{image.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;)})\u0026#34; content = content.replace(f\u0026#34;[[{image}]]\u0026#34;, markdown_image) # Step 4: Copy the image to the Hugo static/images directory if it exists image_source = os.path.join(attachments_dir, image) if os.path.exists(image_source): shutil.copy(image_source, static_images_dir) # Step 5: Write the updated content back to the markdown file with open(filepath, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: file.write(content) print(\u0026#34;Markdown files processed and images copied successfully.\u0026#34;) And for Mac/Linux\nimport os import re import shutil # Paths posts_dir = \u0026#34;/Users/networkchuck/Documents/chuckblog/content/posts/\u0026#34; attachments_dir = \u0026#34;/Users/networkchuck/Documents/neotokos/Attachments/\u0026#34; static_images_dir = \u0026#34;/Users/networkchuck/Documents/chuckblog/static/images/\u0026#34; # Step 1: Process each markdown file in the posts directory for filename in os.listdir(posts_dir): if filename.endswith(\u0026#34;.md\u0026#34;): filepath = os.path.join(posts_dir, filename) with open(filepath, \u0026#34;r\u0026#34;) as file: content = file.read() # Step 2: Find all image links in the format ![Image Description](/images/Pasted%20image%20...%20.png) images = re.findall(r\u0026#39;\\[\\[([^]]*\\.png)\\]\\]\u0026#39;, content) # Step 3: Replace image links and ensure URLs are correctly formatted for image in images: # Prepare the Markdown-compatible link with %20 replacing spaces markdown_image = f\u0026#34;![Image Description](/images/{image.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;)})\u0026#34; content = content.replace(f\u0026#34;[[{image}]]\u0026#34;, markdown_image) # Step 4: Copy the image to the Hugo static/images directory if it exists image_source = os.path.join(attachments_dir, image) if os.path.exists(image_source): shutil.copy(image_source, static_images_dir) # Step 5: Write the updated content back to the markdown file with open(filepath, \u0026#34;w\u0026#34;) as file: file.write(content) print(\u0026#34;Markdown files processed and images copied successfully.\u0026#34;) Congratulations! After all these steps are done, we can run the Hugo server locally and hopefully see our formatted blog posts. This is all well and good; however, if we want anyone to be able to read these, we need to get them hosted on the internet. Luckily, GitHub has a free hosting service called \u0026ldquo;GitHub Pages.\nSetting up GitHub Pages # GitHub Pages is simple to set up. I will be following the official instructions to walk you through this (https://docs.github.com/en/pages/quickstart). First, make sure you have a GitHub account, create a repository called \u0026ldquo;your username\u0026rdquo;.github.io, and initialize the repository with a README. Next, go into the settings and navigate to the \u0026ldquo;Code and automation\u0026rdquo; section in the sidebar, then select the Pages section. From there, select Deploy from a branch under Source and choose your main branch under the branch setting. Now, any time we commit to this branch, it will update our site. Type your repository\u0026rsquo;s name in the URL bar to see if GitHub Pages has been set up correctly.\nHugo needs specific changes to work with GitHub pages (https://gohugo.io/host-and-deploy/host-on-github-pages/). In the site configuration, add the following to the end (for Blowfish its in config/_default/config.toml):\n[caches] [caches.images] dir = \u0026#39;:cacheDir/images\u0026#39; Now create a GitHub workflows directory and a configuration for deploying Hugo.\nmkdir -p .github/workflows touch .github/workflows/hugo.yaml Copy the following config into the hugo.yaml file we just created.\nname: Build and deploy on: push: branches: - main workflow_dispatch: permissions: contents: read pages: write id-token: write concurrency: group: pages cancel-in-progress: false defaults: run: shell: bash jobs: build: runs-on: ubuntu-latest env: DART_SASS_VERSION: 1.93.2 GO_VERSION: 1.25.1 HUGO_VERSION: 0.151.0 NODE_VERSION: 22.18.0 TZ: Europe/Oslo steps: - name: Checkout uses: actions/checkout@v5 with: submodules: recursive fetch-depth: 0 - name: Setup Go uses: actions/setup-go@v5 with: go-version: ${{ env.GO_VERSION }} cache: false - name: Setup Node.js uses: actions/setup-node@v4 with: node-version: ${{ env.NODE_VERSION }} - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Create directory for user-specific executable files run: | mkdir -p \u0026#34;${HOME}/.local\u0026#34; - name: Install Dart Sass run: | curl -sLJO \u0026#34;https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\u0026#34; tar -C \u0026#34;${HOME}/.local\u0026#34; -xf \u0026#34;dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\u0026#34; rm \u0026#34;dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz\u0026#34; echo \u0026#34;${HOME}/.local/dart-sass\u0026#34; \u0026gt;\u0026gt; \u0026#34;${GITHUB_PATH}\u0026#34; - name: Install Hugo run: | curl -sLJO \u0026#34;https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz\u0026#34; mkdir \u0026#34;${HOME}/.local/hugo\u0026#34; tar -C \u0026#34;${HOME}/.local/hugo\u0026#34; -xf \u0026#34;hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz\u0026#34; rm \u0026#34;hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz\u0026#34; echo \u0026#34;${HOME}/.local/hugo\u0026#34; \u0026gt;\u0026gt; \u0026#34;${GITHUB_PATH}\u0026#34; - name: Verify installations run: | echo \u0026#34;Dart Sass: $(sass --version)\u0026#34; echo \u0026#34;Go: $(go version)\u0026#34; echo \u0026#34;Hugo: $(hugo version)\u0026#34; echo \u0026#34;Node.js: $(node --version)\u0026#34; - name: Install Node.js dependencies run: | [[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true - name: Configure Git run: | git config core.quotepath false - name: Cache restore id: cache-restore uses: actions/cache/restore@v4 with: path: ${{ runner.temp }}/hugo_cache key: hugo-${{ github.run_id }} restore-keys: hugo- - name: Build the site run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; \\ --cacheDir \u0026#34;${{ runner.temp }}/hugo_cache\u0026#34; - name: Cache save id: cache-save uses: actions/cache/save@v4 with: path: ${{ runner.temp }}/hugo_cache key: ${{ steps.cache-restore.outputs.cache-primary-key }} - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 Now we can commit all our changes to the repo and the site should automatically be generated. Remember to set our repository as the remote on the Hugo project.\nResults # After you commit to the repo, you should have a Hugo site that can be updated from our Obsidian Vault. This has been my first blog post written using this pipeline, and it makes a massive difference. Not only has this been fun to write, but it\u0026rsquo;s also been incredibly easy. Automatically seeing the formatted changes gives me more freedom in some design decisions and makes storing these blog posts much easier.\nI hope you\u0026rsquo;ve enjoyed setting this up and learnt a lot in the process :)\n","date":"6 October 2025","externalUrl":null,"permalink":"/posts/making-a-tech-blog-using-hugo-and-obsidian/","section":"Posts","summary":"\u003cp\u003eFor a while, I\u0026rsquo;ve wanted to start a blog to share my ideas and try to articulate what I\u0026rsquo;ve learned. Before this iteration of the blog, I tried using a template YAML file within JavaScript to create blog posts. This approach was terrible; it was hard to see any syntax or even format it properly afterward. Sometimes, it\u0026rsquo;s better to use already developed tools and techniques. That\u0026rsquo;s where I found an amazing video by NetworkChuck about setting up a content pipeline using Obsidian to create the Markdown files for a blog, and using a templater such as Hugo to turn them into pretty webpages like the one you are reading now. In this post, I will go over the steps I took to create this blog, and hopefully inspire you to create one as it\u0026rsquo;s so easy to achieve.\u003c/p\u003e","title":"Making a Tech Blog using Hugo and Obsidian","type":"posts"},{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/tags/obsidian/","section":"Tags","summary":"","title":"Obsidian","type":"tags"},{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]